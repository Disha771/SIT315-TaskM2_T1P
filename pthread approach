#include <iostream>
#include <vector>
#include <pthread.h>
#include <chrono>

using namespace std;
using namespace chrono;

int N, num_threads;
vector<vector<int>> A, B, C;

void* multiply(void* arg) {
    int thread_id = *(int*)arg;
    int rows_per_thread = N / num_threads;
    int start = thread_id * rows_per_thread;
    int end = (thread_id == num_threads - 1) ? N : start + rows_per_thread;

    for (int i = start; i < end; ++i)
        for (int j = 0; j < N; ++j)
            for (int k = 0; k < N; ++k)
                C[i][j] += A[i][k] * B[k][j];

    pthread_exit(nullptr);
}

int main() {
    cout << "Enter matrix size N (e.g., 100): ";
    cin >> N;
    cout << "Enter number of threads: ";
    cin >> num_threads;

    A.resize(N, vector<int>(N));
    B.resize(N, vector<int>(N));
    C.resize(N, vector<int>(N, 0));

    // Fill A and B with random values between 1 and 10
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) {
            A[i][j] = rand() % 10 + 1;
            B[i][j] = rand() % 10 + 1;
        }

    vector<pthread_t> threads(num_threads);
    vector<int> thread_ids(num_threads);

    auto start_time = high_resolution_clock::now();

    for (int i = 0; i < num_threads; ++i) {
        thread_ids[i] = i;
        pthread_create(&threads[i], nullptr, multiply, &thread_ids[i]);
    }

    for (int i = 0; i < num_threads; ++i)
        pthread_join(threads[i], nullptr);

    auto end_time = high_resolution_clock::now();
    duration<double, milli> exec_time = end_time - start_time;

    cout << "Execution Time: " << exec_time.count() << " ms" << endl;

    return 0;
}
