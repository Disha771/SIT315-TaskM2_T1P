#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>

using namespace std;
using namespace chrono;

int main() {
    int N, num_threads;

    cout << "Enter matrix size N (e.g., 100): ";
    cin >> N;
    cout << "Enter number of threads: ";
    cin >> num_threads;

    vector<vector<int>> A(N, vector<int>(N));
    vector<vector<int>> B(N, vector<int>(N));
    vector<vector<int>> C(N, vector<int>(N, 0));

    // Fill A and B with random values between 1 and 10
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) {
            A[i][j] = rand() % 10 + 1;
            B[i][j] = rand() % 10 + 1;
        }

    auto start = high_resolution_clock::now();

    // Parallel matrix multiplication using OpenMP
    #pragma omp parallel for num_threads(num_threads)
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            for (int k = 0; k < N; k++)
                C[i][j] += A[i][k] * B[k][j];

    auto end = high_resolution_clock::now();
    duration<double, milli> exec_time = end - start;

    cout << "Execution Time: " << exec_time.count() << " ms" << endl;

    return 0;
}
